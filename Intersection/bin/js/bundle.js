var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //生成数组
        var arr1 = new Array(1000);
        var arr2 = new Array(1000);
        this.tempArr = new Array(10001);
        for (var i = 0; i < 1000; i++) {
            arr1[i] = this.createrRandomNumber();
        }
        this.tempArr = new Array(10001);
        for (var i = 0; i < 1000; i++) {
            arr2[i] = this.createrRandomNumber();
        }
        var arr3 = this.getIntersection(arr1, arr2);
    }
    //生成随机数
    Main.prototype.createrRandomNumber = function () {
        var randomNum;
        while (true) {
            randomNum = Math.round(Math.random() * 10000);
            if (this.tempArr[randomNum] == undefined) {
                this.tempArr[randomNum] = randomNum;
                break;
            }
        }
        return randomNum;
    };
    //对比两个数组
    Main.prototype.getIntersection = function (arr1, arr2) {
        var arr3 = new Array();
        var map = {};
        for (var i = 0; i < arr1.length; i++) {
            map[arr1[i]] = 1;
        }
        for (var i = 0; i < arr2.length; i++) {
            if (map[arr2[i]] > 0) {
                map[arr2[i]] = 0;
                arr3.push(arr2[i]);
            }
        }
        return arr3;
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
